// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
StructuredBuffer<float2> brightestArray;

//simple sdf circle to draw around brightest point
float circleShape(float2 xy,float2 position, float radius)
{
    //return step(radius, length(xy - position));
    return radius - length(xy - position);
}

float2 PointXY;
float2 Resolution;
int brightestArrayCount;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    float4 image = Result[id.xy];

    // if lower than 0.4 step down to black
   // float r = image.r * step(0.4, image.r);
   // float g = image.g * step(0.4, image.g);
   // float b = image.b * step(0.4, image.b);
    // WITHOUT BLOCKING STARS OUT
    float r = image.r ;
    float g = image.g ;
    float b = image.b ;

   /* float dx = id.x - 500;
    float dy = id.y - 500;

    float radius = 500;

    float distanceSquared = dx * dx + dy * dy;
    float radiusSquared = radius * radius;

    if (distanceSquared >= radiusSquared)
    {
        r = 1.0f;
        g = 1.0f;
        b = 1.0f;
    }*/

    //draw square where brightest points is.
    /*if (id.x > PointXY.x && id.x < PointXY.x + 100 &&
        id.y > PointXY.y && id.y < PointXY.y + 100)
    {
        r = 1.0f;
        g = 1.0f;
        b = 1.0f;
    }*/

   
    if (PointXY.x > 0 && PointXY.y > 0)
    {

        r = r * circleShape(id.xy, PointXY, 350);
        g = g * circleShape(id.xy, PointXY, 350);
        b = b * circleShape(id.xy, PointXY, 350);

    }

    //for (int i = 0; i < brightestArrayCount; i++)
    //{

    //    if (id.x > brightestArray[i].x - 50 && id.x < brightestArray[i].x + 50 &&
    //        id.y > brightestArray[i].y - 50  && id.y < brightestArray[i].y + 50)
    //    {
    //        r = 0.0f;
    //        g = 0.0f;
    //        b = 0.7f;
    //    }

    //    float2 brightPosition = brightestArray[i];
    //    r =+ circleShape(id.xy, brightPosition, 200);
    //}

    Result[id.xy] = float4(r, g, b, 1.0);
}
